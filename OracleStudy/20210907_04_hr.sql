SELECT USER
FROM DUAL;
--==>> HR


--------------------------------------------------------------------------------

--■■■ 정규화(Normalization) ■■■--

-- 자바든 오라클이든 스프링이든 하나의 커다란 테이블은 메모리를 엄청나게 낭비시킴
-- 작게 쪼개져있는 테이블이 훨씬 좋다!
-- 그래서 나누고 분리하는 것이 아주 중요~!!
-- 자바에서는 '클래스'를 나누는 것
-- 오라클에서는 '테이블'을 나누는 것
-- JDBC 에서는 '계층'을 나누는 것
-- 웹스크립트에서는 'HTML/CSS/JAVASCRIPT'를 나누는 것
-- 웹 서버 파트백에서는 클라이언트와 소통 디비와 소통 웹쪽과 소통 - 'MVC'를 어떻게 잘나눌지
-- 프래임워크(스크링) 어떤 '틀', '환경', '약속'에 따라 분리할지 

-- IT 분야는 얼마만큼 스마트하게 나누느냐가 가장 중요!!

--○ 정규화란?
--   나누고 분리하고 쪼개는 것
--   면접에서는 : 한마디로... 데이터베이스 서버의 메모리 낭비를 막기 위해
--                어떤 하나의 테이블을... 식별자를 여러 개의 테이블로
--                나누는(분리하는, 쪼개는) 과정을 말한다.


-- ex) 범석이가.. 옥장판을 판매한다.
---    고객리스트 → 거래처 직원 명단이 적혀있는 수첩의 정보를 데이터베이스화 하려고 한다.

-- 테이블명 : 거래처직원
/*
각 컬럼이 10Byte씩 자치한다고 가정
    10Byte     10Byte      10Byte       10Byte   10Byte   10Byte    10Byte
-------------------------------------------------------------------------------
거래처회사명  회사주소    회사전화    거래처직원명  직급  이메일   휴대폰
-------------------------------------------------------------------------------
    LG      서울 여의도  02-345-6789     정미화     부장  jmh@na... 010-...
    LG      서울 여의도  02-345-6789     장진하     대리  cjh@na... 010-...
    LG      서울 여의도  02-345-6789     김소연     과장  ksy@na... 010-...
    LG      서울 여의도  02-345-6789     정진희     부장  kjh@na... 010-...
    SK      서울 소공동  02-123-5678     최수지     대리  csj@na... 010-...
    SK      부산 동래구  051-7777-8888   김진령     대리  kjr@na... 010-...
                                            :
                                            :
-------------------------------------------------------------------------------
*/
/*
가정) 서울 여의도 LG 라는 회사에 근무하는 거래처 직원 명단이
      총 100만 명이라고 가정한다.
      (한 행(레코드)은 70Byte 이다.
      
      어느 날... 『서울 여의도』에 위치한 『LG』본사가
      『경기분당』으로 사옥을 이전하게 되었다.
      이로 인해...
      회사주소는 『경기분당』으로 바뀌고,
      회사전화는 『031-1111-2222』로 바뀌게 되었다.
      
      그러면... 100만 명의 회사주소와 회사전화를 변경해야 한다.
      
      - 이 때 수행되어야 할 쿼리문 → UPDATE 구문
      
      UPDATE 거래처직원
      SET 회사주소 = '경기분당', 회사전화 = '031-1111-2222'
      WHERE 거래처회사명 = 'LG'
        AND 회사주소 = '서울여의도';
        
      --> 100만 개 행을 하드디스크 상에서 읽어다가
          메모리에 로드시켜 주어야 한다.
          즉, 100만 * 70Byte 를 모두
          하드디스크 상에서 읽어다가 메모리에 로드시켜 주어야 한다는 말이다.
          
          --> 이는 테이블의 설계가 잘못되었으므로
              DB 서버는 조만간 메모리 고갈로 인해 DOWN 될 것이다.
              
              --> 그러므로 정규화 과정을 수행해야 한다.
*/


--○ 제 1 정규화
-->  어떤 하나의 테이블에 반복되어 컬럼 값들이 존재한다면
--   값들이 반복되어 나오는 컬럼을 분리하여
--   새로운 테이블을 만들어준다.

--> 제 1정규화를 수행하는 과정에서 분리된 테이블은
--  반드시 부모 테이블과 자식 테이블의 관계를 갖게 된다.

--> 부모 테이블 → 참조받는 컬럼 → PRIMARY KEY
--  자식 테이블 → 참조하는 컬럼 → FOREIGN KEY

--※ 참조받는 컬럼이 갖는 특징(부모 테이블)
--   - 반드시 고유한 값(데이터)이 들어와야 한다.
--     즉, 중복된 값(데이터)이 없어야 한다.
--   - NULL 이 있어서는 안된다.(NOT NULL 이어야 한다.)

--> 제1 정규화를 수행하는 과정에서 부모 테이블의 PRIMARY KEY 는
--  항상 자식 테이블의 FOREIGN KEY로 전이된다.

/*
테이블 명 : 회사 →부모 테이블(회사ID가 고유하니까)
10Byte   10Byte     10Byte      10Byte       
-----------------------------------------------
회사ID 거래처회사명  회사주소    회사전화
------
(참조받는컬럼 → P.K)
-----------------------------------------------
10          LG      서울 여의도  02-345-6789  
20          SK      서울 소공동  02-123-5678  
30          SK      부산 동래구  051-7777-8888
-----------------------------------------------

회사 ID를 식별자로 추가하고 자름



테이블 명 :  직원 → 자식 테이블
 10Byte   10Byte   10Byte    10Byte       10Byte
----------------------------------------------------
거래처직원명  직급  이메일   휴대폰       회사ID
                                          ------
                                          (참조하는컬럼 → F.K)
----------------------------------------------------
    정미화     부장  jmh@na... 010-...       10
    장진하     대리  cjh@na... 010-...       10
    김소연     과장  ksy@na... 010-...       10
    김진희     부장  kjh@na... 010-...       10
    최수지     대리  csj@na... 010-...       20
    김진령     대리  kjr@na... 010-...       30
      :
      :
-----------------------------------------------------
*/

-- 테이블을 잘랐는데 원래있던 모양대로 복원할 수 있어야함!

--※ 테이블이 분할(분리)되지 이전 상태로 조회
/*
SELECT A.거래처회사명,A.회사주소,A.회사전화
     , B.거래처직원명,B.직급,B.이메일,B.휴대폰
FROM 회사 A, 직원 B
WHERE A.회사ID = B.회사ID;
*/

/*
가정) 서울 여의도 LG 라는 회사에 근무하는 거래처 직원 명단이
      총 100만 명이라고 가정한다.
      
      어느 날... 『서울 여의도』에 위치한 『LG』본사가
      『경기분당』으로 사옥을 이전하게 되었다.
      이로 인해...
      회사주소는 『경기분당』으로 바뀌고,
      회사전화는 『031-1111-2222』로 바뀌게 되었다.
      
      그러면... 회사 테이블에서 1건의 회사주소와 회사전화를 변경해야 한다.  CHECK~!!!
      
      - 이 때 수행되어야 할 쿼리문 → UPDATE 구문
      
      UPDATE 회사
      SET 회사주소 = '경기분당', 회사전화 = '031-1111-2222'
      WHERE 회사ID=10;
        
      --> 1 개 행을 하드디스크 상에서 읽어다가
          메모리에 로드시켜 주어야 한다.
          즉, 1 * 40Byte 를 
          하드디스크 상에서 읽어다가 메모리에 로드시켜 주면 된다는 말이다.
          
          --> 이는 테이블의 설계가 잘 된 상황이다.
              
              --> 정규화를 수행하기 이전에는 100만 건을 처리해야 할 업무에서
                  1 건만 처리하면 되는 업무로 바뀐 상황이기 때문에
                  DB 서버는 메모리 고갈 없이 아주 빠르게 처리될 것이다.
*/

-- A. 거래처회사명, 회사전화                             정규화 전 테이블
/*
SELECT 거래처회사명, 회사전화                         | SELECT 거래처회사명, 회사전화
FROM 회사                                             | FROM 거래처직원
→ 이 테이블을 조회할 때 필요한 메모리                |
→  3 * 40Byte                                        |→  200만 * 70Byte

--결론 : 1정규화를 한것이 바람직하다.
*/

-- B. 거래처직원명, 직급
/*
SELECT 거래처직원명, 직급                              | SELECT 거래처직원명, 직급
FROM 직원                                              | FROM 거래처직원
→ 200만 * 50Byte                                      | → 200만 * 70Byte
*/


--C. 거래처회사명, 거래처직원명 (두테이블이 섞여있는 것!)
/*
SELECT 회사.거래처회사명, 직원.거래처직원명             | SELECT 거래처회사명, 거래처직원명 
FROM 회사 JOIN 직원                                     |  FROM 거래처직원
ON 회사.회사ID = 직원.직원ID;                           | 
→ (3 * 40Byte) + (200만 * 50Byte)                      | → 200만 * 70Byte  
*/

-- 어떤 경우의 수도 테이블을 쪼갠것이 메모리를 적게쓴다.(심지어 조인을 했을때도)



/*
-- 테이블명 : 주문
--------------------------------------------------------------------------
고객ID              제품코드             주문일자          주문수량
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    P.K
--------------------------------------------------------------------------
SSK1127(서승균)   SWK9984(새우깡)  2021-08-02 11:27:31        50
SHD7766(송해덕)   YPR8866(양파링)  2021-08-02 11:31:43        30
PHB7755(박효빈)   CPI1100(초파이)  2021-08-02 11:45:54        20
PHB7755(박효빈)   SWK9984(새우깡)  2021-08-02 15:00:03        20
SHD7766(송해덕)   CPI1100(초파이)  2021-08-03 05:12:12        50
SSK1127(서승균)   SWK9984(새우깡)  2021-08-03 05:12:12        50
SSK1127(서승균)   SWK9984(새우깡)  2021-08-05 10:20:20        50
SSK1127(서승균)   YPR8866(양파링)  2021-08-05 10:20:20        10
SSK1127(서승균)   CPI1100(초파이)  2021-08-05 10:20:20        10
SSK1127(서승균)   CPI1100(초파이)  2021-08-05 10:20:20        20  이거에 걸리지만 이건
SSK1127(서승균)   CPI1100(초파이)  2021-08-05 10:20:20        30  이렇게 들어가짐!
                            :
                            :
--------------------------------------------------------------------------

PRIMARY KEY를 
제품코드로 하면 새우깡을 한번 팔면 다시는 새우깡을 팔 수 없음!
주문일자로 하면 많은인원이 주문을 하면 같은 시간대가 발생함!
고객ID로 하면 주문을 두 번 할 수없음!
주문수량으로 하면 50개 샀으면 다시는 50개는 못삼!

뭐얏?! 그럼어떡해?!
→ 컬럼을 두개 묶어서 P.K 제약조건을 만들면 됨!
(고객ID,주문일자) → 이러면 장바구니 기능을 못씀!

(고객ID,제품코드,주문일자)를 묶으면 됨!
 ++++++++++++++++++++++++

*/

--※ 하나의 테이블에 존재하는 PRIMARY KEY 의 최대 갯수는 1개이다.
--   하지만, PRIMARY KEY 를 이루는(구성하는) 컬럼의 갯수는
--   복수(다수, 여러개)인 것이 가능하다.
--   컬럼 1개로만 (단일 컬럼) 구성된 PRIMARY KEY 를 Single Primary Key 라고 부른다.(단일 프라이머리 키)
--   두 개 이상의 컬럼으로 구성된 PRIMARY KEY 를 Composite Primary Key 라고 부른다.(복합 프라이머리 키)

--○ 제2 정규화
--> 제 1 정규화를 마친 결과물에서 PRIMARY KEY 가 SINGL COLUMN 이면
--  제 2 정규화는 수행하지 않는다.
--  하지만, PRIMARY KEY가 COMPOSITE COLUMN 이라면
--  반.드.시. 제 2 정규화를 수행해야 한다.

--> 식별자가 아닌 컬럼은 식별자 전체 컬럼에 대해 의존적이어야 하는데
--  식별자 전체 컬럼이 아닌 일부 식별자 컬럼에 대해서만 의존적이라면
--  이를 분리하여 새로운 테이블을 생성해 준다.

/*
예시) 2 정규화는?

이중호 김진희 최수지 정미화 정가연
====== ======

(가연은 진희에게만 의존적이다! 그렇다면!)


이중호 최수지 정미화
======

김진희 정가연
======

위에서도 
과목명은 과목번호만 바뀌면 무조건 따라서 바뀐다(부분함수종속)
교수자명은 교수자번호 "

일부식별자에게만 종소되어있다면 분리해주자!  → 이게 2 정규화!

*/

/*
[원래 테이블]
-------------------------------------------------------------------------------------------------------------------------------
과목번호    과목명 교수자번호   교수자명    강의실코드   강의실설명                   학번      학생명     점수
-------------------------------------------------------------------------------------------------------------------------------
JA0101     자바기초     21      슈바이처        A301    전산실습관 3층 40석 규모     2102110     채지윤     76
JA0101     자바기초     21      슈바이처        A301    전산실습관 3층 40석 규모     2021111     손범석     80
JA0101     자바기초     21      슈바이처        A301    전산실습관 3층 40석 규모     2021112     김소연     92
JA0101     자바기초     21      슈바이처        A301    전산실습관 3층 40석 규모     2021113     김진희     53
JA0101     자바기초     21      슈바이처        A301    전산실습관 3층 40석 규모     2021114     서승균     60
JA0101     자바기초     21      슈바이처        A301    전산실습관 3층 40석 규모     2021115     최수지     77
JA0102     자바중급     22      테슬라         T502    전자공학관 5층 20석 규모      2102110     채지윤     
JA0102     자바중급     22      테슬라         T502    전자공학관 5층 20석 규모      2021111     손범석  
JA0102     자바중급     22      테슬라         T502    전자공학관 5층 20석 규모         :
JA0102     자바중급     22      테슬라         T502    전자공학관 5층 20석 규모         :
JA0102     자바중급     22      테슬라         T502    전자공학관 5층 20석 규모  
JA0102     자바중급     22      테슬라         T502    전자공학관 5층 20석 규모  
JA0102     자바중급     22      테슬라         T502    전자공학관 5층 20석 규모  
DB0102     오라클중급   22      테슬라         A201    전산실습관 2층 50석 규모
DB0102     오라클중급   10      장영실         T502    전자공학관 5층 20석 규모
DB0103     오라클고급   22      테슬라         A203    전산실습관 2층 90석 규모
JS0105     JSP심화      10      장영실         K101     인문사회관 1층 80석 규모
-------------------------------------------------------------------------------------------------------------------------------


분리시킴

[테이블명 : 과목] → 부모 테이블
--------------------------------------------------------------------------------
과목번호    과목명   교수자번호  교수자명    강의실코드   강의실설명   
++++++++             ++++++++++
  P.K                   P.K
--------------------------------------------------------------------------------
JA0101     자바기초     21      슈바이처        A301    전산실습관 3층 40석 규모
JA0102     자바중급     22      테슬라         T502    전자공학관 5층 20석 규모  
JA0102     자바중급     22      테슬라         T502    전자공학관 5층 20석 규모  
DB0102     오라클중급   22      테슬라         A201    전산실습관 2층 50석 규모
DB0102     오라클중급   10      장영실         T502    전자공학관 5층 20석 규모
DB0103     오라클고급   22      테슬라         A203    전산실습관 2층 90석 규모
JS0105     JSP심화      10      장영실         K101     인문사회관 1층 80석 규모
                                   :
--------------------------------------------------------------------------------


[테이블명 : 점수] → 자식 테이블
----------------------------------------------------
과목번호    교수자번호   학번      학생명     점수
======================
        (F.K)
++++++++                 ++++++
만약 (P         .           K) 있다면 이 두개!
----------------------------------------------------
DB0102         22       2021110     채지윤     89
DB0102         22       2021111     손범석     56

----------------------------------------------------
*/

--○ 제 3 정규화
--> 식별자가 아닌 컬럼이 식별자가 아닌 컬럼에 대해 의존적인 상황이라면
--  이를 분리하여 새로운 테이블을 생성해 주어야 한다.
/*
이중호                     최수지 정미화
======                     ======

이 상황에서 미화는 수지에게만 의존적이다! 그러면 분리!

김진희 정가연
======

위에서는
과목번호 과목명
========

교수자번호 교수자명
==========

강의실코드 강의실 설명
==========
이렇게 나눌 수 있다!
*/

--※ 관계(Relation)의 종류

--  1 : 1
--> 바람직한 관계는 아니지만 종종 만들어질 수 있는 관계
-- 회원테이블과 로그인테이블(동영상 예시)

--  1 : 다
--> 1 정규화 마친 결과물에서 나타나는 바람직한 관계.
-- 10번부서 1  : 제1정규화마친 다른테이블 10번부서 다

--  다 : 다
--> 논리적인 모델링에서는 존재할 수 있지만
--  실제 물리적인 모델링에서는 존재할 수 없는 관계.

/*
테이블명 :  고객(다)                                   테이블명 : 제품(다)
-----------------------------------             --------------------------------
고객번호    고객명 이메일 ...                   제품코드   제품명  제품단가...
(P.K)                                            (P.K)   
-----------------------------------             --------------------------------
1100        장민지 ...                            swk      새우깡  1500    ...
1101        최현정 ...                            ggk      감자깡   700    ...
1102        윤유동 ...                            ggc      자갈치   500    ...
               :                                               :
-----------------------------------             --------------------------------
민지도 새우깡, 감자깡, 자갈치 사먹을 수 있고,
현정도 새우깡, 감자깡, 자갈치 사먹을 수 있고,
유동도 새우깡, 감자깡, 자갈치 사먹을 수 있고,

다 : 다 이지만 실제론 존재할 수없기때문에 1: 다 로 분리해야 한다!↓↓↓

                    
                    테이블명 : 주문등록(1)
                    ------------------------------------------------
         주문번호   고객번호    제품코드    주문일자    주문수량
          (p.k)      (f.k)       (f.k)
                    ------------------------------------------------
                    1100         swk          ....       20
                    1100         ggk          ....       50
                    1101         ggc          ....       11
                    1101         swk          ....       20
                    1102         ggk          ....       10
                    1100         ggc          ....       20
                    ------------------------------------------------

*/


--○ 제 4 정규화
--  위에서 확인한 내용과 같이 『다:다』 관계를 『1:다』 관계로 깨뜨리는 과정이
--  제 4 정규화의 수행과정이다.
--  → 일반적으로 파생테이블 생성(주문등록, 수강신청)
--      → 『다:다』 관계를 『1:다』 관계로 깨뜨리는 역할 수행



--○ 역정규화(비정규화)
--  이거는 실무에서 안해도 괜찮
--  팁 :  테이블의 행갯수의 차이가 심하면 역정규화를 안하는 것이 낫다!
--                                 없으면 역정규활르 하는 것이 낫다!

/*
--A 경우 → 역정규화를 수행하지 않는 것이 바람직한 경우
테이블명 : 부서                  테이블명 : 사원
   10         10    10              10      10      10  10      10      10       10
---------------------------      --------------------------------------------    -----
부서번호    부서명  주소         사원번호  사원명 직급  급여  입사일 부서번호  + 부서명
++++++++                         ++++++++                             =======
 (P.K)                            (P.K)                                (F.K)
---------------------------      --------------------------------------------    -----
        10개 행                               1,000,000개 행
---------------------------      --------------------------------------------    -----

>> 업무 분석 상 조회 결과물
-----------------------------
부서명  사원명  직급  급여
-----------------------------
 부서    사원   사원  사원
   
→ 『부서』테이블과 『사원』테이블을 JOIN 했을 때의 크기
    (10 * 30Byte) + (1,000,000 * 60Byte) = 300 + 60,000,000 = 60,000,300 Byte

→ 『사원』테이블을 역정규화 수행한 후 이 테이블만 읽어올 때의 크기
    (즉, 부서 테이블의 부서명 컬럼을 사원 테이블에 추가한 경우)
    1,000,000 * 70Byte = 70,000,000Byte



--B 경우 → 역정규화를 수행하는 것이 바람직하다.

테이블명 : 부서                  테이블명 : 사원
   10         10    10              10      10      10  10      10      10       10
---------------------------      --------------------------------------------    -----
부서번호    부서명  주소         사원번호  사원명 직급  급여  입사일 부서번호  + 부서명
++++++++                         ++++++++                             =======
 (P.K)                            (P.K)                                (F.K)
---------------------------      --------------------------------------------    -----
    500,000개 행                               1,000,000개 행
---------------------------      --------------------------------------------    -----

>> 업무 분석 상 조회 결과물
-----------------------------
부서명  사원명  직급  급여
-----------------------------
 부서    사원   사원  사원


→ 『부서』테이블과 『사원』테이블을 JOIN 했을 때의 크기
    ( 500,000 * 30Byte) + (1,000,000 * 60Byte) = 15,000,000 + 60,000,000 = 75,000,000 Byte

→ 『사원』테이블을 역정규화 수행한 후 이 테이블만 읽어올 때의 크기
    (즉, 부서 테이블의 부서명 컬럼을 사원 테이블에 추가한 경우)
    1,000,000 * 70Byte = 70,000,000Byte

*/

-- 정규화 / 역정규화 끝!
--------------------------------------------------------------------------------
-- DB 설계시 주의해야 하는 것!!

/*
테이블명 : 사원 → 부모 테이블
---------------------------------------------------------
사원번호   사원명  주민번호  입사일       급여  직급 ...                        
+++++++++                                                        
 (P.K)                                                                                       
---------------------------------------------------------                           
  7369     장진하  9XXXXX..  2010-XX-XX   XXXX  부장 ...                            
  7370     김진희  9XXXXX..  2010-XX-XX   XXXX  차장 ...                              
  7371     장민지  9XXXXX..  2011-XX-XX   XXXX  과장 ...                               
  7372     손범석  9XXXXX..  2010-XX-XX   XXXX  대리 ...                                       
  7373     이찬호  9XXXXX..  2011-XX-XX   XXXX  사원 ...
                              :
                              :
---------------------------------------------------------


테이블명 : 사원가족 → 자식 테이블
----------------------------------------------
주민번호    사원번호    관계      성명
++++++++    ========
 (P.K)       (F.K)
----------------------------------------------
9XXXXX..      7369      남편      송강
0XXXXX..      7369      아들      송강호
9XXXXX..      7372      아내      송지효
9XXXXX..      7371      남편      남주혁
                      :
                      :
----------------------------------------------

--> 송강이란 사람이 진하의 남편이면서 진희의 남편이 송강호이면 
                    진하의 아들인 송강호는 사원가족에 두번들어가야하는데 불가능! 

--> 1정규화가 제대로 되지 않았다!
직급을 지금은 저렇게 적어서 그렇지 계속 밑에 자료가 있으면 
사원사원사원사원 대리대리대리 겹치게 계속 있음!



테이블명 : 사원 → 부모 테이블
---------------------------------------------------------
사원번호   사원명  주민번호  입사일       급여  직급코드 ...                         직급
+++++++++                                       =========                           -----------------------------
 (P.K)                                            (F.K)                              직급코드    직급     직급설명              
---------------------------------------------------------                           -----------------------------
  7369     장진하  9XXXXX..  2010-XX-XX   XXXX    2 ...                                  2       부장       ...
  7370     김진희  9XXXXX..  2010-XX-XX   XXXX    3 ...                                  3       차장        ...
  7371     장민지  9XXXXX..  2011-XX-XX   XXXX    4 ...                                  4       과장       ....
  7372     손범석  9XXXXX..  2010-XX-XX   XXXX  대리 ...                                         :
  7373     이찬호  9XXXXX..  2011-XX-XX   XXXX  사원 ...
                              :
                              :
---------------------------------------------------------


테이블명 : 사원가족 → 자식 테이블
----------------------------------------------                                      가족관계
주민번호    사원번호    관계코드      성명                                              -------------------------
++++++++    ========                                                                  관계코드  관계명  관계설정                  
 (P.K)       (F.K)                                                                      1       배우자   남편이나 아내                 
----------------------------------------------                                          2       부모     본인이나 배우자의 부모
9XXXXX..      7369        1      송강            바깥양반  
0XXXXX..      7369        3      송강호
9XXXXX..      7372        1      송지효           안사람  집사람  와이프  색시  안주인....
9XXXXX..      7371      남편      남주혁
                      :
                      :
----------------------------------------------
*/


-- 관계  [               ] 직접입력받게 해놔서 통일이 하나도 안된 DB..
-- 이러면 절대로 배우자에게 서비스를 못해줌!


