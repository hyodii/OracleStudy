SELECT USER
FROM DUAL;
--==>> HR

-- 나중에 팀플하면 테이블 최소 70개는 있을 것임

--■■■ 팀별 실습 과제 ■■■--

-- HR 샘플 스키마 ERD 를 이용한 테이블 재구성~!!!

-- 팀별로.. HR 스키마에 있는 기본 테이블 (7개)
-- COUNTRIES / DEPARTMENTS / EMPLOYEES / JOBS / JOB_HISTORY / LOCATIONS / REGIONS
-- 을 똑~~~같이 새로 구성한다.

-- 단, 생성하는 테이블의 이름은 『테이블명+팀번호』
-- ex) 1팀의 경우...
-- COUNTRIES04 / DEPARTMENTS04 / EMPLOYEES04 / JOBS04 / JOB_HISTORY04 / LOCATIONS04 / REGIONS04
-- .....
-- 과 같이 구성한다.

-- 1. 기존 테이블의 정보 수집
-- 2. 테이블 생성(컬럼 이름, 자료형, DEFAULT 표현식, NOT NULL 등....)
--    제약조건 설정(PK,UK,FK,CK,...NN)
-- 3. 작성 후 데이터 입력
-- 4. 제출 항목
--    20210909_02_hr_팀별실습과제_4조.sql
--    후기_4조.txt(얻게된 점)
--    → 오라클 00팀 과제.zip

SELECT *
FROM TAB;

SELECT *
FROM COUNTRIES;
--25개
SELECT *
FROM DEPARTMENTS;
--27개
SELECT *
FROM EMPLOYEES;
--107개
SELECT *
FROM JOBS;
--19개
SELECT *
FROM JOB_HISTORY;
--10개
SELECT *
FROM LOCATIONS;
--23개
SELECT *
FROM REGIONS;
--4개

DESC COUNTRIES;
--승균
DESC DEPARTMENTS;
--미화
DESC JOBS;
--효진
DESC JOB_HISTORY;
--지윤
DESC REGIONS;
--현정

-- 컬럼이랑 제약조건 그리고 테이블어떻게 짜야하는지까지 생각하고 오기!
-- 1. 각 테이블의 컬럼, 제약조건 확인
-- 2. 확인된 자료 바탕으로 테이블 쿼리문 작성

--제약조건명
--테이블명_컬럼명_제약조건약어

--○ 제약조건 확인
SELECT *
FROM USER_CONSTRAINTS;

-- 제약조건을 매번 확인하니까 뷰를 하나 만들자!
--※ 제약조건 확인용 전용 뷰(VIEW) 생성
CREATE OR REPLACE VIEW VIEW_CONSTCHECK
AS
SELECT UC.OWNER "OWNER"
     , UC.CONSTRAINT_NAME "CONSTRAINT_NAME"
     , UC.TABLE_NAME "TABLE_NAME"
     , UC.CONSTRAINT_TYPE "CONSTRAINT_TYPE"
     , UCC.COLUMN_NAME "COLUMN_NAME"
     , UC.SEARCH_CONDITION "SEARCH_CONDITION"
     , UC.DELETE_RULE "DELETE_RULE"
FROM USER_CONSTRAINTS UC  JOIN  USER_CONS_COLUMNS UCC
ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME;
--==>> View VIEW_CONSTCHECK이(가) 생성되었습니다.

--JOBS 제약조건 확인!
SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOBS';
--==>>
/*
HR	JOB_TITLE_NN	JOBS	C	JOB_TITLE	"JOB_TITLE" IS NOT NULL	
HR	JOB_ID_PK	    JOBS	P	JOB_ID		
*/
DESC JOBS;
/*
이름         널?       유형           
---------- -------- ------------ 
JOB_ID     NOT NULL VARCHAR2(10) 
JOB_TITLE  NOT NULL VARCHAR2(35) 
MIN_SALARY          NUMBER(6)    
MAX_SALARY          NUMBER(6)   
*/


--지우고 휴지통
/*
DROP TABLE REGIONS04;
PURGE RECYCLEBIN;

--제약조건 삭제
ALTER TABLE EMPLOYEES04
DROP CONSTRAINT EMPLOYEES04_DEPARTMENT_ID_FK;
*/
SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = '';

SELECT * 
FROM TAB;

-- JOBS04 테이블 생성
CREATE TABLE JOBS04
( JOB_ID        VARCHAR2(10)
, JOB_TITLE     VARCHAR2(35)
, MIN_SALARY    NUMBER(6)
, MAX_SALARY    NUMBER(6)
, CONSTRAINT JOBS04_JOB_ID_PK PRIMARY KEY(JOB_ID)
--, CONSTRAINT JOB_TITLE_NN04 CHECK(JOB_TITLE IS NOT NULL)
);
--==>> Table JOBS04이(가) 생성되었습니다.

--나중에 JOB_TITLE NOT NULL 추가!(이러면 제약조건명 + "" 해결!)
ALTER TABLE JOBS04
MODIFY JOB_TITLE CONSTRAINT JOB04_JOB_TITLE_NN NOT NULL;

--ALTER TABLE JOBS04 MODIFY JOB_TITLE NOT NULL;
--ALTER TABLE JOBS04 ADD CONSTRAINT JOBS_JOB_TITLE_NN CHECK(JOB_TITLE IS NOT NULL);

--JOBS04 제약조건 확인!
SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOBS04';
--==>>
/*
HR	JOBS04_JOB_ID_PK	JOBS04	P	JOB_ID		
HR	JOB04_JOB_TITLE_NN	JOBS04	C	JOB_TITLE	"JOB_TITLE" IS NOT NULL				
*/
DESC JOBS04;
/*
이름         널?       유형           
---------- -------- ------------ 
JOB_ID     NOT NULL VARCHAR2(10) 
JOB_TITLE  NOT NULL VARCHAR2(35) 
MIN_SALARY          NUMBER(6)    
MAX_SALARY          NUMBER(6)   
*/

--데이터 넣기
INSERT INTO JOBS04 (SELECT * FROM JOBS);
/*
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('AD_PRES','President',20080,40000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('AD_VP','Administration Vice President',15000,30000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('AD_ASST','Administration Assistant',3000,6000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('FI_MGR','Finance Manager',8200,16000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('FI_ACCOUNT','Accountant',4200,9000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('AC_MGR','Accounting Manager',8200,16000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('AC_ACCOUNT','Public Accountant',4200,9000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('SA_MAN','Sales Manager',10000,20080);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('SA_REP','Sales Representative',6000,12008);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('PU_MAN','Purchasing Manager',8000,15000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('PU_CLERK','Purchasing Clerk',2500,5500);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('ST_MAN','Stock Manager',5500,8500);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('ST_CLERK','Stock Clerk',2008,5000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('SH_CLERK','Shipping Clerk',2500,5500);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('IT_PROG','Programmer',4000,10000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('MK_MAN','Marketing Manager',9000,15000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('MK_REP','Marketing Representative',4000,9000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('HR_REP','Human Resources Representative',4000,9000);
INSERT INTO JOBS04(COL1,COL2,COL3,COL4) VALUES ('PR_REP','Public Relations Representative',4500,10500);
*/
SELECT *
FROM JOBS04;


--각 테이블의 제약조건
SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME IN('COUNTRIES','DEPARTMENTS', 'EMPLOYEES','JOBS','JOB_HISTORY','LOCATIONS','REGIONS');
--==>>
/*
HR	COUNTRY_ID_NN	            COUNTRIES	C	COUNTRY_ID	        "COUNTRY_ID" IS NOT NULL	
HR	COUNTRY_C_ID_PK	            COUNTRIES	P	COUNTRY_ID		
HR	COUNTR_REG_FK	            COUNTRIES	R	REGION_ID		                                    NO ACTION
HR	DEPT_NAME_NN	            DEPARTMENTS	C	DEPARTMENT_NAME	    "DEPARTMENT_NAME" IS NOT NULL	
HR	DEPT_ID_PK	                DEPARTMENTS	P	DEPARTMENT_ID		
HR	DEPT_LOC_FK	                DEPARTMENTS	R	LOCATION_ID		                                    NO ACTION
HR	DEPT_MGR_FK	                DEPARTMENTS	R	MANAGER_ID		                                    NO ACTION
HR	EMP_LAST_NAME_NN	        EMPLOYEES	C	LAST_NAME	        "LAST_NAME" IS NOT NULL	
HR	EMP_EMAIL_NN	            EMPLOYEES	C	EMAIL	            "EMAIL" IS NOT NULL	
HR	EMP_HIRE_DATE_NN	        EMPLOYEES	C	HIRE_DATE	        "HIRE_DATE" IS NOT NULL	
HR	EMP_JOB_NN	                EMPLOYEES	C	JOB_ID	            "JOB_ID" IS NOT NULL	
HR	EMP_SALARY_MIN	            EMPLOYEES	C	SALARY	            salary > 0	
HR	EMP_EMAIL_UK	            EMPLOYEES	U	EMAIL		
HR	EMP_EMP_ID_PK	            EMPLOYEES	P	EMPLOYEE_ID		
HR	EMP_DEPT_FK	                EMPLOYEES	R	DEPARTMENT_ID		                                NO ACTION
HR	EMP_JOB_FK	                EMPLOYEES	R	JOB_ID		                                        NO ACTION
HR	EMP_MANAGER_FK	            EMPLOYEES	R	MANAGER_ID		                                    NO ACTION
HR	JHIST_EMPLOYEE_NN	        JOB_HISTORY	C	EMPLOYEE_ID	        "EMPLOYEE_ID" IS NOT NULL	
HR	JHIST_START_DATE_NN	        JOB_HISTORY	C	START_DATE	        "START_DATE" IS NOT NULL	
HR	JHIST_END_DATE_NN	        JOB_HISTORY	C	END_DATE	        "END_DATE" IS NOT NULL	
HR	JHIST_JOB_NN	            JOB_HISTORY	C	JOB_ID	            "JOB_ID" IS NOT NULL	
HR	JHIST_DATE_INTERVAL	        JOB_HISTORY	C	START_DATE	        end_date > start_date	
HR	JHIST_DATE_INTERVAL	        JOB_HISTORY	C	END_DATE	        end_date > start_date	
HR	JHIST_EMP_ID_ST_DATE_PK	    JOB_HISTORY	P	EMPLOYEE_ID		
HR	JHIST_EMP_ID_ST_DATE_PK	    JOB_HISTORY	P	START_DATE		
HR	JHIST_JOB_FK	            JOB_HISTORY	R	JOB_ID		                                        NO ACTION
HR	JHIST_EMP_FK	            JOB_HISTORY	R	EMPLOYEE_ID		                                    NO ACTION
HR	JHIST_DEPT_FK	            JOB_HISTORY	R	DEPARTMENT_ID		                                NO ACTION
HR	JOB_TITLE_NN	            JOBS	    C	JOB_TITLE	        "JOB_TITLE" IS NOT NULL	
HR	JOB_ID_PK	                JOBS	    P	JOB_ID		
HR	LOC_CITY_NN	                LOCATIONS	C	CITY	            "CITY" IS NOT NULL	
HR	LOC_ID_PK	                LOCATIONS	P	LOCATION_ID		
HR	LOC_C_ID_FK	                LOCATIONS	R	COUNTRY_ID		                                    NO ACTION
HR	REGION_ID_NN	            REGIONS	    C	REGION_ID	        "REGION_ID" IS NOT NULL	
HR	REG_ID_PK	                REGIONS	    P	REGION_ID		
*/



--LOCATIONS 제약조건 확인!
SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'LOCATIONS';
--==>>
/*
HR	LOC_CITY_NN	LOCATIONS	C	CITY	        "CITY" IS NOT NULL	
HR	LOC_ID_PK	LOCATIONS	P	LOCATION_ID		
HR	LOC_C_ID_FK	LOCATIONS	R	COUNTRY_ID		                        NO ACTION
*/
DESC LOCATIONS;
/*
이름             널?       유형           
-------------- -------- ------------ 
LOCATION_ID    NOT NULL NUMBER(4)    
STREET_ADDRESS          VARCHAR2(40) 
POSTAL_CODE             VARCHAR2(12) 
CITY           NOT NULL VARCHAR2(30) 
STATE_PROVINCE          VARCHAR2(25) 
COUNTRY_ID              CHAR(2)  
*/
-- LOCATIONS04 테이블 생성
CREATE TABLE LOCATIONS04
( LOCATION_ID           NUMBER(4)     
, STREET_ADDRESS        VARCHAR2(40)    
, POSTAL_CODE           VARCHAR2(12)
, CITY                  VARCHAR2(30) 
, STATE_PROVINCE        VARCHAR2(25)
, COUNTRY_ID            CHAR(2) 
, CONSTRAINT LOCATIONS04_LOC_ID_PK PRIMARY KEY(LOCATION_ID)
, CONSTRAINT LOCATIONS04_LOC_C_ID_FK FOREIGN KEY(COUNTRY_ID)
             REFERENCES COUNTRIES04(COUNTRY_ID)
);

ALTER TABLE LOCATIONS04
MODIFY CITY CONSTRAINT LOCATIONS04_LOC_CITY_NN NOT NULL;

--JOBS04 제약조건 확인!
SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'LOCATIONS04';
--==>>
/*
HR	LOCATIONS04_LOC_ID_PK	LOCATIONS04	P	LOCATION_ID		
HR	LOCATIONS04_LOC_C_ID_FK	LOCATIONS04	R	COUNTRY_ID		NO ACTION
HR	LOCATIONS04_LOC_CITY_NN	LOCATIONS04	C	CITY	"CITY" IS NOT NULL	
*/

DESC LOCATIONS04;
/*
이름             널?       유형           
-------------- -------- ------------ 
LOCATION_ID    NOT NULL NUMBER(4)    
STREET_ADDRESS          VARCHAR2(40) 
POSTAL_CODE             VARCHAR2(12) 
CITY           NOT NULL VARCHAR2(30) 
STATE_PROVINCE          VARCHAR2(25) 
COUNTRY_ID              CHAR(2) 
*/
-- 데이터 입력
INSERT INTO LOCATIONS04 (SELECT * FROM LOCATIONS);

SELECT *
FROM LOCATIONS;





/*
--제약조건의 이름 변경
ALTER TABLE TBL_PANMAE
RENAME CONSTRAINT TBL_PANAME_PDCODE_FK TO
                  TBL_PANMAE_PDCODE_FK;


-- 이거는 컬럼명 변경하는 법
ALTER TABLE JOBS04 TB_DEPT RENAME TO TB_DEPARTMENT;
*/




-- 모든 테이블,뷰 조회
SELECT *
FROM TAB;

-- 테이블의 커멘트 정보 확인
SELECT *
FROM USER_TAB_COMMENTS;
-- 컬럼 레벨의 커멘트 정보 확인
SELECT *
FROM USER_COL_COMMENTS;


-- EMPLOYEES04 테이블생성
CREATE TABLE EMPLOYEES04
( EMPLOYEE_ID       NUMBER(6)    
, FIRST_NAME        VARCHAR2(20) 
, LAST_NAME         VARCHAR2(25) 
, EMAIL             VARCHAR2(25) 
, PHONE_NUMBER      VARCHAR2(20) 
, HIRE_DATE         DATE         
, JOB_ID            VARCHAR2(10) 
, SALARY            NUMBER(8,2)  
, COMMISSION_PCT    NUMBER(2,2)  
, MANAGER_ID        NUMBER(6)    
, DEPARTMENT_ID     NUMBER(4) 
, CONSTRAINT EMPLOYEES04_EMPLOYEE_ID_PK PRIMARY KEY(EMPLOYEE_ID)
, CONSTRAINT EMPLOYEES04_JOB_ID_FK FOREIGN KEY(JOB_ID)
             REFERENCES JOBS04(JOB_ID)
, CONSTRAINT EMPLOYEES04_EMAIL_UK UNIQUE(EMAIL)
, CONSTRAINT EMPLOYEES04_SALARY_CK CHECK(SALARY>0)
);

ALTER TABLE EMPLOYEES04
MODIFY(HIRE_DATE CONSTRAINT EMPLOYEES04_HIRE_DATE_NN NOT NULL
     , LAST_NAME CONSTRAINT EMPLOYEES04_LAST_NAME_NN NOT NULL
     , EMAIL CONSTRAINT EMPLOYEES04_EMAIL_NN NOT NULL
     , JOB_ID CONSTRAINT EMPLOYEES04_JOB_ID_NN NOT NULL
);

ALTER TABLE EMPLOYEES04
ADD CONSTRAINT EMPLOYEES04_DEPARTMENT_ID_FK FOREIGN KEY(DEPARTMENT_ID)
               REFERENCES DEPARTMENTS04(DEPARTMENT_ID);

DESC EMPLOYEES;

SELECT *
FROM EMPLOYEES;

SELECT * 
FROM DEPARTMENTS;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'EMPLOYEES04';
--==>>
/*
HR	EMP_LAST_NAME_NN	EMPLOYEES	C	LAST_NAME	"LAST_NAME" IS NOT NULL	
HR	EMP_EMAIL_NN	    EMPLOYEES	C	EMAIL	    "EMAIL" IS NOT NULL	
HR	EMP_HIRE_DATE_NN	EMPLOYEES	C	HIRE_DATE	"HIRE_DATE" IS NOT NULL	
HR	EMP_JOB_NN	        EMPLOYEES	C	JOB_ID	    "JOB_ID" IS NOT NULL	
HR	EMP_SALARY_MIN	    EMPLOYEES	C	SALARY	    salary > 0	
HR	EMP_EMAIL_UK	    EMPLOYEES	U	EMAIL		
HR	EMP_EMP_ID_PK	    EMPLOYEES	P	EMPLOYEE_ID		
HR	EMP_DEPT_FK     	EMPLOYEES	R	DEPARTMENT_ID		NO ACTION
HR	EMP_JOB_FK	        EMPLOYEES	R	JOB_ID		NO ACTION
HR	EMP_MANAGER_FK	    EMPLOYEES	R	MANAGER_ID		NO ACTION
*/



--------------------------------------------------------------------------------------------------------------------
-- 업무 순서
/*
1. 각 테이블의 컬럼, 제약조건 확인
2. 확인된 자료 바탕으로 테이블 쿼리문 작성
    (테이블 생성 → 제약조건 수정 → 데이터 입력)
3. 작성된 테이블 쿼리문 취합
4. EMPLOYEES - DEPARTMENTS 테이블 간의 외래키 제약조건 추가
*/
--------------------------------------------------------------------------------------------------------------------
-- [순서대로 넣기]

-- ① REGIONS
-- 테이블 생성
CREATE TABLE REGIONS04
( REGION_ID     NUMBER 
, REGION_NAME   VARCHAR2(25)    
, CONSTRAINT REGIONS04_REGION_ID_PK PRIMARY KEY(REGION_ID)
);

-- 제약조건 수정
ALTER TABLE REGIONS04
MODIFY REGION_ID CONSTRAINT REGIONS04_REGION_ID_NN NOT NULL;

-- 데이터 입력
INSERT INTO REGIONS04(REGION_ID, REGION_NAME) VALUES(1, 'Europe');
INSERT INTO REGIONS04(REGION_ID, REGION_NAME) VALUES(2, 'Americas');
INSERT INTO REGIONS04(REGION_ID, REGION_NAME) VALUES(3, 'Asia');
INSERT INTO REGIONS04(REGION_ID, REGION_NAME) VALUES(4, 'Middle East and Africa');


-- 확인
DESC REGIONS;
DESC REGIONS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'REGIONS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'REGIONS04';

SELECT *
FROM REGIONS;

SELECT *
FROM REGIONS04;


-- ② COUNTRIES
-- 테이블 생성
CREATE TABLE COUNTRIES04
( COUNTRY_ID CHAR(2)
, COUNTRY_NAME VARCHAR(40)
, REGION_ID NUMBER
, CONSTRAINT COUNTRIES04_COUNTRY_C_ID_PK PRIMARY KEY(COUNTRY_ID)
, CONSTRAINT COUNTRIES04_COUNTRY_REG_FK FOREIGN KEY(REGION_ID) 
                                       REFERENCES REGIONS04(REGION_ID)
);

-- 제약조건 수정
ALTER TABLE COUNTRIES04
MODIFY COUNTRY_ID CONSTRAINT COUNTRIES04_COUNTRY_ID_NN NOT NULL;

-- 테이터 입력
INSERT INTO COUNTRIES04 (SELECT * FROM COUNTRIES);


-- 확인
DESC COUNTRIES;
DESC COUNTRIES04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'COUNTRIES';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'COUNTRIES04';

SELECT *
FROM COUNTRIES;

SELECT *
FROM COUNTRIES04;


-- ③ LOCATIONS
-- 테이블 생성
CREATE TABLE LOCATIONS04
( LOCATION_ID       NUMBER(4)
, STREET_ADDRESS    VARCHAR2(40)
, POSTAL_CODE       VARCHAR2(12)
, CITY              VARCHAR2(30)
, STATE_PROVINCE    VARCHAR2(25)
, COUNTRY_ID        CHAR(2)
, CONSTRAINT LOCATIONS04_LOCATION_ID_PK PRIMARY KEY(LOCATION_ID)
, CONSTRAINT LOCATIONS04_COUNTRY_ID_FK FOREIGN KEY(COUNTRY_ID)
                                      REFERENCES COUNTRIES04(COUNTRY_ID)
);

-- 제약조건 수정
ALTER TABLE LOCATIONS04
MODIFY CITY CONSTRAINT LOCATIONS04_CITY_NN NOT NULL;

-- 데이터 입력
INSERT INTO LOCATIONS04 (SELECT * FROM LOCATIONS);


-- 확인
DESC LOCATIONS;
DESC LOCATIONS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'LOCATIONS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'LOCATIONS04';

SELECT *
FROM LOCATIONS;

SELECT *
FROM LOCATIONS04;


-- ④ DEPARTMENTS
-- 테이블 생성
CREATE TABLE DEPARTMENTS04
( DEPARTMENT_ID     NUMBER(4)
, DEPARTMENT_NAME   VARCHAR2(30)       
, MANAGER_ID        NUMBER(6)   
, LOCATION_ID       NUMBER(4)
, CONSTRAINT DEPARTMENTS04_DEPT_ID_PK PRIMARY KEY(DEPARTMENT_ID)  
, CONSTRAINT DEPARTMENTS04_DEPT_LOC_FK FOREIGN KEY(LOCATION_ID)
                                      REFERENCES LOCATIONS04(LOCATION_ID)
);

-- 제약조건 수정
ALTER TABLE DEPARTMENTS04
MODIFY DEPARTMENT_NAME CONSTRAINT DEPARTMENTS04_DEPT_NAME_NN NOT NULL;

-- 데이터 입력
INSERT INTO DEPARTMENTS04 (SELECT * FROM DEPARTMENTS);


-- 확인
DESC DEPARTMENTS;
DESC DEPARTMENTS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'DEPARTMENTS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'DEPARTMENTS04';
--==> "DEPT_MGR_FK" 제외 완료 (외래키 때문에 추가 생성 예정)

SELECT *
FROM DEPARTMENTS;

SELECT *
FROM DEPARTMENTS04;


-- ⑤ JOBS
-- 테이블 생성
CREATE TABLE JOBS04
( JOB_ID        VARCHAR2(10)
, JOB_TITLE     VARCHAR2(35)
, MIN_SALARY    NUMBER(6)
, MAX_SALARY    NUMBER(6)
, CONSTRAINT JOBS04_JOB_ID_PK PRIMARY KEY(JOB_ID)
);

-- 제약조건 수정
ALTER TABLE JOBS04
MODIFY JOB_TITLE CONSTRAINT JOBS04_JOB_TITLE_NN NOT NULL;

-- 데이터 입력
INSERT INTO JOBS04 (SELECT * FROM JOBS);


-- 확인
DESC JOBS;
DESC JOBS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOBS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOBS04';

SELECT *
FROM JOBS;

SELECT *
FROM JOBS04;


-- ⑥ EMPLOYEES
-- 테이블 생성
CREATE TABLE EMPLOYEES04
( EMPLOYEE_ID       NUMBER(6)    --NOT NULL
, FIRST_NAME        VARCHAR2(20) 
, LAST_NAME         VARCHAR2(25) --NOT NULL
, EMAIL             VARCHAR2(25) --NOT NULL
, PHONE_NUMBER      VARCHAR2(20) 
, HIRE_DATE         DATE         --NOT NULL
, JOB_ID            VARCHAR2(10) --NOT NULL
, SALARY            NUMBER(8,2)  
, COMMISSION_PCT    NUMBER(2,2)  
, MANAGER_ID        NUMBER(6)    
, DEPARTMENT_ID     NUMBER(4)  
, CONSTRAINT EMPLOYEES04_EMPLOYEE_ID_PK PRIMARY KEY(EMPLOYEE_ID)
, CONSTRAINT EMPLOYEES04_EMAIL_UK UNIQUE(EMAIL)
, CONSTRAINT EMPLOYEES04_SALARY_CK CHECK(SALARY > 0)
, CONSTRAINT EMPLOYEES04_JOB_ID_FK FOREIGN KEY(JOB_ID)
                                   REFERENCES JOBS04(JOB_ID)
);

-- 제약조건 수정
ALTER TABLE EMPLOYEES04
MODIFY 
( HIRE_DATE CONSTRAINT EMPLOYEES04_HIRE_DATE_NN NOT NULL
, LAST_NAME CONSTRAINT EMPLOYEES04_LAST_NAME_NN NOT NULL
, EMAIL CONSTRAINT EMPLOYEES04_EMAIL_NN NOT NULL
, JOB_ID CONSTRAINT EMPLOYEES04_JOB_ID_NN NOT NULL
);

-- 데이터 입력
INSERT INTO EMPLOYEES04 (SELECT * FROM EMPLOYEES);


-- 확인
DESC EMPLOYEES;
DESC EMPLOYEES04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'EMPLOYEES'
ORDER BY 4, 2;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'EMPLOYEES04'
ORDER BY 4, 2;
--==>> "EMP_DEPT_FK, EMP_MANAGER_FK" 제외 완료(외래키 문제)

SELECT *
FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES04;


-- ⑦ DEPARTMENTS, EMPLOYEES 간의 외래키 설정
-- EMPLOYEES 외래키 추가
ALTER TABLE EMPLOYEES04
ADD CONSTRAINT EMPLOYEES04_DEPARTMENT_ID_FK FOREIGN KEY(DEPARTMENT_ID)
                                                REFERENCES DEPARTMENTS04(DEPARTMENT_ID);
ALTER TABLE EMPLOYEES04
ADD CONSTRAINT EMPLOYEES04_MANAGER_ID_FK FOREIGN KEY(MANAGER_ID)
                                                REFERENCES EMPLOYEES04(EMPLOYEE_ID);
                                                

-- DEPARTMENTS 외래키 추가           
ALTER TABLE DEPARTMENTS04
ADD CONSTRAINT DEPARTMENTS04_DEPT_MGR_FK FOREIGN KEY(MANAGER_ID)
                                         REFERENCES EMPLOYEES04(EMPLOYEE_ID);

-- DEPARTMENTS 확인
DESC DEPARTMENTS;
DESC DEPARTMENTS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'DEPARTMENTS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'DEPARTMENTS04';
--==> "DEPT_MGR_FK" 제외 완료 (외래키 때문에 추가 생성 예정)

SELECT *
FROM DEPARTMENTS;

SELECT *
FROM DEPARTMENTS04;


-- EMPLOYEES 확인
DESC EMPLOYEES;
DESC EMPLOYEES04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'EMPLOYEES'
ORDER BY 4, 2;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'EMPLOYEES04'
ORDER BY 4, 2;
--==>> "EMP_DEPT_FK, EMP_MANAGER_FK" 제외 완료(외래키 문제)

SELECT *
FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES04;


-- ⑧ JOB_HISTORY
-- 테이블 생성

CREATE TABLE JOB_HISTORY04
( EMPLOYEE_ID     NUMBER(6)           
, START_DATE      DATE                
, END_DATE        DATE                
, JOB_ID          VARCHAR2(10)        
, DEPARTMENT_ID   NUMBER(4)
, CONSTRAINT JOB_HISTORY04_E_ID_S_DATE_PK PRIMARY KEY(EMPLOYEE_ID, START_DATE)
, CONSTRAINT JOB_HISTORY04_DATE_INTERVAL CHECK(END_DATE > START_DATE)
, CONSTRAINT JOB_HISTORY04_JOB_ID_FK FOREIGN KEY(JOB_ID)
                                     REFERENCES JOBS04(JOB_ID)
, CONSTRAINT JOB_HISTORY04_E_ID_FK FOREIGN KEY(EMPLOYEE_ID)
                                   REFERENCES EMPLOYEES04(EMPLOYEE_ID)
, CONSTRAINT JOB_HISTORY04_DEPARTMENT_ID_FK FOREIGN KEY(DEPARTMENT_ID)
                                           REFERENCES DEPARTMENTS04(DEPARTMENT_ID)
);
--> EMPLOYEE_ID, START_DATE 가 포함된 제약조건은
--  제약조건 이름의 길이 제한(30자) 때문에 
--  각각 E_ID 와 S_DATE 로 축약


-- 제약조건 수정
ALTER TABLE JOB_HISTORY04
MODIFY
( EMPLOYEE_ID CONSTRAINT JOB_HISTORY04_EMPLOYEE_ID_NN NOT NULL
, START_DATE CONSTRAINT JOB_HISTORY04_START_DATE_NN NOT NULL
, END_DATE CONSTRAINT JOB_HISTORY04_END_DATE_NN NOT NULL
, JOB_ID CONSTRAINT JOB_HISTORY04_JOB_ID_NN NOT NULL
);


-- 데이터 입력
INSERT INTO JOB_HISTORY04 (SELECT * FROM JOB_HISTORY);


-- 확인
DESC JOB_HISTORY;
DESC JOB_HISTORY04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOB_HISTORY'
ORDER BY 4, 5;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOB_HISTORY04'
ORDER BY 4, 5;

SELECT *
FROM JOB_HISTORY;

SELECT *
FROM JOB_HISTORY04;


-- 외래키 테이블2개  순서변경해서 넣어보자!
-- 원래는 EMPLOYEES 먼저넣고 DEPARTMENTS 넣었는데!
-- 반대로 DEPARTMENTS 넣고 EMPLOYEES넣자
--- 제약조건 지우는데만...엄청걸림....
--------------------------------------------------------------------------------------------------------------------
--지우고 휴지통 & 확인
/*
DROP TABLE LOCATIONS04;
PURGE RECYCLEBIN;

--제약조건 삭제
ALTER TABLE EMPLOYEES04
DROP CONSTRAINT EMPLOYEES04_EMPLOYEE_ID_PK;

SELECT * 
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOB_HISTORY04';

SELECT * 
FROM TAB;
*/

-- [순서대로 넣기(외래키 DEPARTMENTS 넣고 EMPLOYEES 넣은 것!)]

-- ① REGIONS
-- 테이블 생성
CREATE TABLE REGIONS04
( REGION_ID     NUMBER 
, REGION_NAME   VARCHAR2(25)    
, CONSTRAINT REGIONS04_REGION_ID_PK PRIMARY KEY(REGION_ID)
);

-- 제약조건 수정
ALTER TABLE REGIONS04
MODIFY REGION_ID CONSTRAINT REGIONS04_REGION_ID_NN NOT NULL;

-- 데이터 입력
INSERT INTO REGIONS04(REGION_ID, REGION_NAME) VALUES(1, 'Europe');
INSERT INTO REGIONS04(REGION_ID, REGION_NAME) VALUES(2, 'Americas');
INSERT INTO REGIONS04(REGION_ID, REGION_NAME) VALUES(3, 'Asia');
INSERT INTO REGIONS04(REGION_ID, REGION_NAME) VALUES(4, 'Middle East and Africa');


-- 확인
DESC REGIONS;
DESC REGIONS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'REGIONS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'REGIONS04';

SELECT *
FROM REGIONS;

SELECT *
FROM REGIONS04;


-- ② COUNTRIES
-- 테이블 생성
CREATE TABLE COUNTRIES04
( COUNTRY_ID CHAR(2)
, COUNTRY_NAME VARCHAR(40)
, REGION_ID NUMBER
, CONSTRAINT COUNTRIES04_COUNTRY_C_ID_PK PRIMARY KEY(COUNTRY_ID)
, CONSTRAINT COUNTRIES04_COUNTRY_REG_FK FOREIGN KEY(REGION_ID) 
                                       REFERENCES REGIONS04(REGION_ID)
);

-- 제약조건 수정
ALTER TABLE COUNTRIES04
MODIFY COUNTRY_ID CONSTRAINT COUNTRIES04_COUNTRY_ID_NN NOT NULL;

-- 데이터 입력
INSERT INTO COUNTRIES04 (SELECT * FROM COUNTRIES);


-- 확인
DESC COUNTRIES;
DESC COUNTRIES04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'COUNTRIES';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'COUNTRIES04';

SELECT *
FROM COUNTRIES;

SELECT *
FROM COUNTRIES04;


-- ③ LOCATIONS
-- 테이블 생성
CREATE TABLE LOCATIONS04
( LOCATION_ID       NUMBER(4)
, STREET_ADDRESS    VARCHAR2(40)
, POSTAL_CODE       VARCHAR2(12)
, CITY              VARCHAR2(30)
, STATE_PROVINCE    VARCHAR2(25)
, COUNTRY_ID        CHAR(2)
, CONSTRAINT LOCATIONS04_LOCATION_ID_PK PRIMARY KEY(LOCATION_ID)
, CONSTRAINT LOCATIONS04_COUNTRY_ID_FK FOREIGN KEY(COUNTRY_ID)
                                      REFERENCES COUNTRIES04(COUNTRY_ID)
);

-- 제약조건 수정
ALTER TABLE LOCATIONS04
MODIFY CITY CONSTRAINT LOCATIONS04_CITY_NN NOT NULL;

-- 데이터 입력
INSERT INTO LOCATIONS04 (SELECT * FROM LOCATIONS);


-- 확인
DESC LOCATIONS;
DESC LOCATIONS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'LOCATIONS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'LOCATIONS04';

SELECT *
FROM LOCATIONS;

SELECT *
FROM LOCATIONS04;


-- ④ DEPARTMENTS
-- 테이블 생성
CREATE TABLE DEPARTMENTS04
( DEPARTMENT_ID     NUMBER(4)
, DEPARTMENT_NAME   VARCHAR2(30)       
, MANAGER_ID        NUMBER(6)   
, LOCATION_ID       NUMBER(4)
, CONSTRAINT DEPARTMENTS04_DEPT_ID_PK PRIMARY KEY(DEPARTMENT_ID)  
, CONSTRAINT DEPARTMENTS04_DEPT_LOC_FK FOREIGN KEY(LOCATION_ID)
                                      REFERENCES LOCATIONS04(LOCATION_ID)
);

-- 제약조건 수정
ALTER TABLE DEPARTMENTS04
MODIFY DEPARTMENT_NAME CONSTRAINT DEPARTMENTS04_DEPT_NAME_NN NOT NULL;

-- 데이터 입력
INSERT INTO DEPARTMENTS04 (SELECT * FROM DEPARTMENTS);


-- 확인
DESC DEPARTMENTS;
DESC DEPARTMENTS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'DEPARTMENTS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'DEPARTMENTS04';
--==> "DEPT_MGR_FK" 제외 완료 (외래키 때문에 추가 생성 예정)

SELECT *
FROM DEPARTMENTS;

SELECT *
FROM DEPARTMENTS04;


-- ⑤ JOBS
-- 테이블 생성
CREATE TABLE JOBS04
( JOB_ID        VARCHAR2(10)
, JOB_TITLE     VARCHAR2(35)
, MIN_SALARY    NUMBER(6)
, MAX_SALARY    NUMBER(6)
, CONSTRAINT JOBS04_JOB_ID_PK PRIMARY KEY(JOB_ID)
);

-- 제약조건 수정
ALTER TABLE JOBS04
MODIFY JOB_TITLE CONSTRAINT JOBS04_JOB_TITLE_NN NOT NULL;

-- 데이터 입력
INSERT INTO JOBS04 (SELECT * FROM JOBS);


-- 확인
DESC JOBS;
DESC JOBS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOBS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOBS04';

SELECT *
FROM JOBS;

SELECT *
FROM JOBS04;


-- ⑥ EMPLOYEES
-- 테이블 생성
CREATE TABLE EMPLOYEES04
( EMPLOYEE_ID       NUMBER(6)    --NOT NULL
, FIRST_NAME        VARCHAR2(20) 
, LAST_NAME         VARCHAR2(25) --NOT NULL
, EMAIL             VARCHAR2(25) --NOT NULL
, PHONE_NUMBER      VARCHAR2(20) 
, HIRE_DATE         DATE         --NOT NULL
, JOB_ID            VARCHAR2(10) --NOT NULL
, SALARY            NUMBER(8,2)  
, COMMISSION_PCT    NUMBER(2,2)  
, MANAGER_ID        NUMBER(6)    
, DEPARTMENT_ID     NUMBER(4)  
, CONSTRAINT EMPLOYEES04_EMPLOYEE_ID_PK PRIMARY KEY(EMPLOYEE_ID)
, CONSTRAINT EMPLOYEES04_EMAIL_UK UNIQUE(EMAIL)
, CONSTRAINT EMPLOYEES04_SALARY_CK CHECK(SALARY > 0)
, CONSTRAINT EMPLOYEES04_JOB_ID_FK FOREIGN KEY(JOB_ID)
                                   REFERENCES JOBS04(JOB_ID)
);

-- 제약조건 수정
ALTER TABLE EMPLOYEES04
MODIFY 
( HIRE_DATE CONSTRAINT EMPLOYEES04_HIRE_DATE_NN NOT NULL
, LAST_NAME CONSTRAINT EMPLOYEES04_LAST_NAME_NN NOT NULL
, EMAIL CONSTRAINT EMPLOYEES04_EMAIL_NN NOT NULL
, JOB_ID CONSTRAINT EMPLOYEES04_JOB_ID_NN NOT NULL
);

-- 데이터 입력
INSERT INTO EMPLOYEES04 (SELECT * FROM EMPLOYEES);


-- 확인
DESC EMPLOYEES;
DESC EMPLOYEES04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'EMPLOYEES'
ORDER BY 4, 2;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'EMPLOYEES04'
ORDER BY 4, 2;
--==>> "EMP_DEPT_FK, EMP_MANAGER_FK" 제외 완료(외래키 문제)

SELECT *
FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES04;


-- ⑦ DEPARTMENTS, EMPLOYEES 간의 외래키 설정(★앞에 한거에서 순서 바꿔줌!!!!★DEPARTMENTS 먼저 넣어줌!)                                         

-- DEPARTMENTS 외래키 추가           
ALTER TABLE DEPARTMENTS04
ADD CONSTRAINT DEPARTMENTS04_DEPT_MGR_FK FOREIGN KEY(MANAGER_ID)
                                         REFERENCES EMPLOYEES04(EMPLOYEE_ID);
-- EMPLOYEES 외래키 추가
ALTER TABLE EMPLOYEES04
ADD CONSTRAINT EMPLOYEES04_DEPARTMENT_ID_FK FOREIGN KEY(DEPARTMENT_ID)
                                                REFERENCES DEPARTMENTS04(DEPARTMENT_ID);
ALTER TABLE EMPLOYEES04
ADD CONSTRAINT EMPLOYEES04_MANAGER_ID_FK FOREIGN KEY(MANAGER_ID)
                                                REFERENCES EMPLOYEES04(EMPLOYEE_ID);
                                                
                                                
-- DEPARTMENTS 확인
DESC DEPARTMENTS;
DESC DEPARTMENTS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'DEPARTMENTS';

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'DEPARTMENTS04';
--==> "DEPT_MGR_FK" 제외 완료 (외래키 때문에 추가 생성 예정)

SELECT *
FROM DEPARTMENTS;

SELECT *
FROM DEPARTMENTS04;


-- EMPLOYEES 확인
DESC EMPLOYEES;
DESC EMPLOYEES04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'EMPLOYEES'
ORDER BY 4, 2;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'EMPLOYEES04'
ORDER BY 4, 2;
--==>> "EMP_DEPT_FK, EMP_MANAGER_FK" 제외 완료(외래키 문제)

SELECT *
FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES04;


-- ⑧ JOB_HISTORY
-- 테이블 생성

CREATE TABLE JOB_HISTORY04
( EMPLOYEE_ID     NUMBER(6)           
, START_DATE      DATE                
, END_DATE        DATE                
, JOB_ID          VARCHAR2(10)        
, DEPARTMENT_ID   NUMBER(4)
, CONSTRAINT JOB_HISTORY04_E_ID_S_DATE_PK PRIMARY KEY(EMPLOYEE_ID, START_DATE)
, CONSTRAINT JOB_HISTORY04_DATE_INTERVAL CHECK(END_DATE > START_DATE)
, CONSTRAINT JOB_HISTORY04_JOB_ID_FK FOREIGN KEY(JOB_ID)
                                     REFERENCES JOBS04(JOB_ID)
, CONSTRAINT JOB_HISTORY04_E_ID_FK FOREIGN KEY(EMPLOYEE_ID)
                                   REFERENCES EMPLOYEES04(EMPLOYEE_ID)
, CONSTRAINT JOB_HISTORY04_DEPARTMENT_ID_FK FOREIGN KEY(DEPARTMENT_ID)
                                           REFERENCES DEPARTMENTS04(DEPARTMENT_ID)
);
--> EMPLOYEE_ID, START_DATE 가 포함된 제약조건은
--  제약조건 이름의 길이 제한(30자) 때문에 
--  각각 E_ID 와 S_DATE 로 축약


-- 제약조건 수정
ALTER TABLE JOB_HISTORY04
MODIFY
( EMPLOYEE_ID CONSTRAINT JOB_HISTORY04_EMPLOYEE_ID_NN NOT NULL
, START_DATE CONSTRAINT JOB_HISTORY04_START_DATE_NN NOT NULL
, END_DATE CONSTRAINT JOB_HISTORY04_END_DATE_NN NOT NULL
, JOB_ID CONSTRAINT JOB_HISTORY04_JOB_ID_NN NOT NULL
);


-- 데이터 입력
INSERT INTO JOB_HISTORY04 (SELECT * FROM JOB_HISTORY);


-- 확인
DESC JOB_HISTORY;
DESC JOB_HISTORY04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOB_HISTORY'
ORDER BY 4, 5;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME = 'JOB_HISTORY04'
ORDER BY 4, 5;

SELECT *
FROM JOB_HISTORY;

SELECT *
FROM JOB_HISTORY04;



-- [결론]
/*
1.테이블 생성하고 외래키 겹쳐지는거 빼고 나머지 외래키 생성하고 데이터 입력후
외래키 입력할때 EMPYOEES04 와 DEPARTMENTS04 의 순서는 상관없다!

2. NOT NULL을 지정할 때 제약조건명도 입력해야하고 
SEARCH_CONDITION에 ""가 들어가야하는 문제를 해결하는 과정을 알게되었고, 
테이블간에  외래키가 공통으로 들어갔을 때 외래키를 지정하면 오류가 나고, 
이를 해결하려고 여러가지 시도하며 방법을 찾아가는 것이 좋았다.

3. 제약조건이 있으면 테이블을 삭제할수없어서 제약조건을 
하나하나 삭제해줘야하는 것을 경험할 수 있었습니다.

4. 나중에 파이널 프로젝트에서는 테이블 갯수가 70개라는데..엄청 헷갈릴거같다..
*/










